openapi: 3.0.3
info:
  title: backend
  version: 1.0.0
  description: Payload project created from blog template
  license:
    name: MIT
paths:
  /posts:
    get:
      summary: Find paginated Posts
      description: Find paginated Posts
      tags:
        - posts
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/postssResponse"
    post:
      summary: Create a new Post
      description: Create a new Post
      tags:
        - posts
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/postsRequest"
      responses:
        "200":
          $ref: "#/components/responses/postsUpsertConfirmationResponse"
    patch:
      summary: Update multiple Posts
      description: Update all Posts matching the where query
      tags:
        - posts
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/postsRequest"
      responses:
        "200":
          $ref: "#/components/responses/postsBulkResponse"
    delete:
      summary: Delete multiple Posts
      description: Delete all Posts matching the where query
      tags:
        - posts
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/postsBulkResponse"
  "/posts/{id}":
    get:
      summary: Get a single Post by its id
      description: Get a single Post by its id
      tags:
        - posts
      parameters:
        - name: id
          in: path
          description: id of the Post
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/postsResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    patch:
      summary: Updates a Post
      description: Updates a Post
      tags:
        - posts
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Post
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/postsRequest"
      responses:
        "200":
          $ref: "#/components/responses/postsUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    delete:
      summary: Deletes an existing Post
      description: Deletes an existing Post
      tags:
        - posts
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Post
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/postsUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
  /users:
    get:
      summary: Find paginated Users
      description: Find paginated Users
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/userssResponse"
    post:
      summary: Create a new User
      description: Create a new User
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/usersRequest"
      responses:
        "200":
          $ref: "#/components/responses/usersUpsertConfirmationResponse"
    patch:
      summary: Update multiple Users
      description: Update all Users matching the where query
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/usersRequest"
      responses:
        "200":
          $ref: "#/components/responses/usersBulkResponse"
    delete:
      summary: Delete multiple Users
      description: Delete all Users matching the where query
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/usersBulkResponse"
  "/users/{id}":
    get:
      summary: Get a single User by its id
      description: Get a single User by its id
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the User
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/usersResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    patch:
      summary: Updates a User
      description: Updates a User
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the User
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/usersRequest"
      responses:
        "200":
          $ref: "#/components/responses/usersUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    delete:
      summary: Deletes an existing User
      description: Deletes an existing User
      tags:
        - users
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the User
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/usersUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
  /users/me:
    get:
      summary: Current user data
      description: Data about the current user
      tags:
        - auth
      responses:
        "200":
          $ref: "#/components/responses/usersMeResponse"
  /users/login:
    post:
      summary: Login
      description: Login
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/loginRequest"
      responses:
        "200":
          $ref: "#/components/responses/usersMeResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
  /users/logout:
    post:
      summary: Logout
      description: Logout
      tags:
        - auth
      responses:
        "200":
          $ref: "#/components/responses/confirmationResponse"
        "400":
          $ref: "#/components/responses/NoUserErrorResponse"
  /users/refresh-token:
    post:
      summary: Refresh JWT
      description: Refresh the JWT token
      tags:
        - auth
      responses:
        "200":
          $ref: "#/components/responses/usersMeResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
  /users/unlock:
    post:
      summary: Unlock account
      description: Unlock account
      tags:
        - auth
      security:
        - basicAuth: []
          cookieAuth: []
      requestBody:
        $ref: "#/components/requestBodies/unlockRequest"
      responses:
        "200":
          $ref: "#/components/responses/confirmationResponse"
  /media:
    get:
      summary: Find paginated Media
      description: Find paginated Media
      tags:
        - media
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/mediasResponse"
    post:
      summary: Create a new Media
      description: Create a new Media
      tags:
        - media
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/mediaRequest"
      responses:
        "200":
          $ref: "#/components/responses/mediaUpsertConfirmationResponse"
    patch:
      summary: Update multiple Media
      description: Update all Media matching the where query
      tags:
        - media
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/mediaRequest"
      responses:
        "200":
          $ref: "#/components/responses/mediaBulkResponse"
    delete:
      summary: Delete multiple Media
      description: Delete all Media matching the where query
      tags:
        - media
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/mediaBulkResponse"
  "/media/{id}":
    get:
      summary: Get a single Media by its id
      description: Get a single Media by its id
      tags:
        - media
      parameters:
        - name: id
          in: path
          description: id of the Media
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/mediaResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    patch:
      summary: Updates a Media
      description: Updates a Media
      tags:
        - media
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Media
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/mediaRequest"
      responses:
        "200":
          $ref: "#/components/responses/mediaUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    delete:
      summary: Deletes an existing Media
      description: Deletes an existing Media
      tags:
        - media
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Media
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/mediaUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
  /profiles:
    get:
      summary: Find paginated Profiles
      description: Find paginated Profiles
      tags:
        - profiles
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/profilessResponse"
    post:
      summary: Create a new Profile
      description: Create a new Profile
      tags:
        - profiles
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/profilesRequest"
      responses:
        "200":
          $ref: "#/components/responses/profilesUpsertConfirmationResponse"
    patch:
      summary: Update multiple Profiles
      description: Update all Profiles matching the where query
      tags:
        - profiles
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/profilesRequest"
      responses:
        "200":
          $ref: "#/components/responses/profilesBulkResponse"
    delete:
      summary: Delete multiple Profiles
      description: Delete all Profiles matching the where query
      tags:
        - profiles
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/profilesBulkResponse"
  "/profiles/{id}":
    get:
      summary: Get a single Profile by its id
      description: Get a single Profile by its id
      tags:
        - profiles
      parameters:
        - name: id
          in: path
          description: id of the Profile
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/profilesResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    patch:
      summary: Updates a Profile
      description: Updates a Profile
      tags:
        - profiles
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Profile
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/profilesRequest"
      responses:
        "200":
          $ref: "#/components/responses/profilesUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    delete:
      summary: Deletes an existing Profile
      description: Deletes an existing Profile
      tags:
        - profiles
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Profile
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/profilesUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
  /skills:
    get:
      summary: Find paginated Skills
      description: Find paginated Skills
      tags:
        - skills
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/skillssResponse"
    post:
      summary: Create a new Skill
      description: Create a new Skill
      tags:
        - skills
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/skillsRequest"
      responses:
        "200":
          $ref: "#/components/responses/skillsUpsertConfirmationResponse"
    patch:
      summary: Update multiple Skills
      description: Update all Skills matching the where query
      tags:
        - skills
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/skillsRequest"
      responses:
        "200":
          $ref: "#/components/responses/skillsBulkResponse"
    delete:
      summary: Delete multiple Skills
      description: Delete all Skills matching the where query
      tags:
        - skills
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
          required: false
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
          required: true
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
          required: false
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
          required: false
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/skillsBulkResponse"
  "/skills/{id}":
    get:
      summary: Get a single Skill by its id
      description: Get a single Skill by its id
      tags:
        - skills
      parameters:
        - name: id
          in: path
          description: id of the Skill
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
        - name: sort
          in: query
          description: sort by field
          schema:
            type: string
        - name: where
          in: query
          description: pass a where query to constrain returned documents (complex type,
            see documentation)
          style: deepObject
          explode: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/where"
        - name: limit
          in: query
          description: limit the returned documents to a certain number
          schema:
            type: number
        - name: page
          in: query
          description: get a specific page of documents
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/skillsResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    patch:
      summary: Updates a Skill
      description: Updates a Skill
      tags:
        - skills
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Skill
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/skillsRequest"
      responses:
        "200":
          $ref: "#/components/responses/skillsUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
    delete:
      summary: Deletes an existing Skill
      description: Deletes an existing Skill
      tags:
        - skills
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: id
          in: path
          description: id of the Skill
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/skillsUpsertConfirmationResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
  /globals/frontpage:
    get:
      summary: Get the Frontpage
      description: Get the Frontpage
      tags:
        - global frontpage
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/frontpageResponse"
    post:
      summary: Updates the Frontpage
      description: Updates the Frontpage
      tags:
        - global frontpage
      security:
        - basicAuth: []
          cookieAuth: []
      parameters:
        - name: depth
          in: query
          description: number of levels to automatically populate relationships and uploads
          schema:
            type: number
        - name: locale
          in: query
          description: retrieves document(s) in a specific locale
          schema:
            type: string
        - name: fallback-locale
          in: query
          description: specifies a fallback locale if no locale value exists
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/frontpageRequest"
      responses:
        "200":
          $ref: "#/components/responses/frontpageUpsertConfirmationResponse"
  /access:
    get:
      summary: Current user's resource access
      description: Lists the user's access per resource
      tags:
        - auth
      security:
        - basicAuth: []
          cookieAuth: []
      responses:
        "200":
          $ref: "#/components/responses/accessResponse"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
    cookieAuth:
      in: cookie
      type: apiKey
      name: payload-token
  schemas:
    error:
      title: Error response message
      type: object
      additionalProperties: false
      properties:
        errors:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              message:
                type: string
            required:
              - message
      required:
        - errors
    confirmation:
      title: Confirmation response message
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
      required:
        - message
    where:
      title: Where clause
      type: object
      additionalProperties:
        anyOf:
          - type: object
            properties:
              equals: {}
            additionalProperties: false
          - type: object
            properties:
              not_equals: {}
            additionalProperties: false
          - type: object
            properties:
              greater_than: &a1
                anyOf:
                  - type: string
                  - type: number
            additionalProperties: false
          - type: object
            properties:
              greater_than_equal: *a1
            additionalProperties: false
          - type: object
            properties:
              less_than: *a1
            additionalProperties: false
          - type: object
            properties:
              less_than_equal: *a1
            additionalProperties: false
          - type: object
            properties:
              like:
                type: string
            additionalProperties: false
          - type: object
            properties:
              contains:
                type: string
            additionalProperties: false
          - type: object
            properties:
              in:
                type: string
            additionalProperties: false
          - type: object
            properties:
              not_in:
                type: string
            additionalProperties: false
          - type: object
            properties:
              exists:
                type: boolean
            additionalProperties: false
          - type: object
            properties:
              near:
                type: string
            additionalProperties: false
      properties:
        or:
          type: array
          items:
            $ref: "#/components/schemas/where"
        and:
          type: array
          items:
            $ref: "#/components/schemas/where"
      example:
        or:
          - color:
              equals: mint
          - and:
              - color:
                  equals: white
              - featured:
                  equals: false
    access:
      title: Access
      type: object
      additionalProperties: false
      properties:
        canAccessAdmin:
          type: boolean
        collections:
          type: object
          additionalProperties:
            type: object
            additionalProperties: false
            properties:
              create:
                type: object
                additionalProperties: false
                properties:
                  permission:
                    type: boolean
                required:
                  - permission
              read:
                type: object
                additionalProperties: false
                properties:
                  permission:
                    type: boolean
                required:
                  - permission
              update:
                type: object
                additionalProperties: false
                properties:
                  permission:
                    type: boolean
                required:
                  - permission
              delete:
                type: object
                additionalProperties: false
                properties:
                  permission:
                    type: boolean
                required:
                  - permission
              fields:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties: false
                  properties:
                    create:
                      type: object
                      additionalProperties: false
                      properties:
                        permission:
                          type: boolean
                      required:
                        - permission
                    read:
                      type: object
                      additionalProperties: false
                      properties:
                        permission:
                          type: boolean
                      required:
                        - permission
                    update:
                      type: object
                      additionalProperties: false
                      properties:
                        permission:
                          type: boolean
                      required:
                        - permission
                  required:
                    - create
                    - read
                    - update
            required:
              - create
              - read
              - update
              - delete
              - fields
      required:
        - canAccessAdmin
        - collections
    posts:
      title: Post
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        keywords:
          type: string
        postImage:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/media"
        content:
          type: array
          items:
            type: object
        status:
          type: string
          enum:
            - draft
            - published
        publishedDate:
          type: string
        author:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/users"
        updatedAt:
          type: string
        createdAt:
          type: string
      required:
        - id
        - title
        - description
        - postImage
        - updatedAt
        - createdAt
    postss:
      type: object
      title: Posts
      properties:
        docs:
          type: array
          items:
            $ref: "#/components/schemas/posts"
        totalDocs:
          type: number
        limit:
          type: number
        totalPages:
          type: number
        page:
          type: number
        pagingCounter:
          type: number
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: number
        nextPage:
          type: number
      required:
        - docs
        - totalDocs
        - limit
        - totalPages
        - page
        - pagingCounter
        - hasPrevPage
        - hasNextPage
    postsUpsertConfirmation:
      type: object
      title: Post upsert confirmation
      properties:
        doc:
          $ref: "#/components/schemas/posts"
        message:
          type: string
      required:
        - doc
        - message
    users:
      title: User
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              - admin
              - editor
        updatedAt:
          type: string
        createdAt:
          type: string
        email:
          type: string
        resetPasswordToken:
          type: string
        resetPasswordExpiration:
          type: string
        salt:
          type: string
        hash:
          type: string
        loginAttempts:
          type: number
        lockUntil:
          type: string
        password:
          type: string
      required:
        - id
        - updatedAt
        - createdAt
        - email
        - password
    userss:
      type: object
      title: Users
      properties:
        docs:
          type: array
          items:
            $ref: "#/components/schemas/users"
        totalDocs:
          type: number
        limit:
          type: number
        totalPages:
          type: number
        page:
          type: number
        pagingCounter:
          type: number
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: number
        nextPage:
          type: number
      required:
        - docs
        - totalDocs
        - limit
        - totalPages
        - page
        - pagingCounter
        - hasPrevPage
        - hasNextPage
    usersUpsertConfirmation:
      type: object
      title: User upsert confirmation
      properties:
        doc:
          $ref: "#/components/schemas/users"
        message:
          type: string
      required:
        - doc
        - message
    usersMe:
      title: Me
      type: object
      additionalProperties: false
      properties:
        user:
          $ref: "#/components/schemas/users"
          nullable: true
        token:
          type: string
        exp:
          type: number
      required:
        - user
    media:
      title: Media
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        alt:
          type: string
        updatedAt:
          type: string
        createdAt:
          type: string
        url:
          type: string
        filename:
          type: string
        mimeType:
          type: string
        filesize:
          type: number
        width:
          type: number
        height:
          type: number
        sizes:
          type: object
          additionalProperties: false
          properties:
            thumbnail:
              type: object
              additionalProperties: false
              properties:
                url:
                  type: string
                width:
                  type: number
                height:
                  type: number
                mimeType:
                  type: string
                filesize:
                  type: number
                filename:
                  type: string
            sixteenByNineMedium:
              type: object
              additionalProperties: false
              properties:
                url:
                  type: string
                width:
                  type: number
                height:
                  type: number
                mimeType:
                  type: string
                filesize:
                  type: number
                filename:
                  type: string
      required:
        - id
        - updatedAt
        - createdAt
    medias:
      type: object
      title: Media
      properties:
        docs:
          type: array
          items:
            $ref: "#/components/schemas/media"
        totalDocs:
          type: number
        limit:
          type: number
        totalPages:
          type: number
        page:
          type: number
        pagingCounter:
          type: number
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: number
        nextPage:
          type: number
      required:
        - docs
        - totalDocs
        - limit
        - totalPages
        - page
        - pagingCounter
        - hasPrevPage
        - hasNextPage
    mediaUpsertConfirmation:
      type: object
      title: Media upsert confirmation
      properties:
        doc:
          $ref: "#/components/schemas/media"
        message:
          type: string
      required:
        - doc
        - message
    profiles:
      title: Profile
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        skills:
          oneOf:
            - type: array
              items:
                type: string
            - type: array
              items:
                $ref: "#/components/schemas/skills"
        updatedAt:
          type: string
        createdAt:
          type: string
      required:
        - id
        - name
        - description
        - updatedAt
        - createdAt
    profiless:
      type: object
      title: Profiles
      properties:
        docs:
          type: array
          items:
            $ref: "#/components/schemas/profiles"
        totalDocs:
          type: number
        limit:
          type: number
        totalPages:
          type: number
        page:
          type: number
        pagingCounter:
          type: number
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: number
        nextPage:
          type: number
      required:
        - docs
        - totalDocs
        - limit
        - totalPages
        - page
        - pagingCounter
        - hasPrevPage
        - hasNextPage
    profilesUpsertConfirmation:
      type: object
      title: Profile upsert confirmation
      properties:
        doc:
          $ref: "#/components/schemas/profiles"
        message:
          type: string
      required:
        - doc
        - message
    skills:
      title: Skill
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
    skillss:
      type: object
      title: Skills
      properties:
        docs:
          type: array
          items:
            $ref: "#/components/schemas/skills"
        totalDocs:
          type: number
        limit:
          type: number
        totalPages:
          type: number
        page:
          type: number
        pagingCounter:
          type: number
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: number
        nextPage:
          type: number
      required:
        - docs
        - totalDocs
        - limit
        - totalPages
        - page
        - pagingCounter
        - hasPrevPage
        - hasNextPage
    skillsUpsertConfirmation:
      type: object
      title: Skill upsert confirmation
      properties:
        doc:
          $ref: "#/components/schemas/skills"
        message:
          type: string
      required:
        - doc
        - message
    frontpage:
      title: Frontpage
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        about:
          type: string
        aboutImage:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/media"
        features:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              title:
                type: string
              content:
                type: string
              id:
                type: string
            required:
              - title
              - content
        updatedAt:
          type: string
        createdAt:
          type: string
      required:
        - id
    frontpageUpsertConfirmation:
      type: object
      title: Frontpage upsert confirmation
      properties:
        doc:
          $ref: "#/components/schemas/frontpage"
        message:
          type: string
      required:
        - doc
        - message
  responses:
    InvalidRequestErrorResponse:
      description: invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    UnauthorizedErrorResponse:
      description: unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    NotFoundErrorResponse:
      description: not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    confirmationResponse:
      description: confirmed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/confirmation"
    NoUserErrorResponse:
      description: no user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    InvalidTokenErrorResponse:
      description: invalid token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    accessResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/access"
    postsResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/posts"
    postssResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/postss"
    postsUpsertConfirmationResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/postsUpsertConfirmation"
    postsBulkResponse:
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: string
              docs:
                type: array
                items:
                  $ref: "#/components/schemas/posts"
    usersResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users"
    userssResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/userss"
    usersUpsertConfirmationResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/usersUpsertConfirmation"
    usersBulkResponse:
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: string
              docs:
                type: array
                items:
                  $ref: "#/components/schemas/users"
    usersMeResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/usersMe"
    mediaResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/media"
    mediasResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/medias"
    mediaUpsertConfirmationResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/mediaUpsertConfirmation"
    mediaBulkResponse:
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: string
              docs:
                type: array
                items:
                  $ref: "#/components/schemas/media"
    profilesResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/profiles"
    profilessResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/profiless"
    profilesUpsertConfirmationResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/profilesUpsertConfirmation"
    profilesBulkResponse:
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: string
              docs:
                type: array
                items:
                  $ref: "#/components/schemas/profiles"
    skillsResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/skills"
    skillssResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/skillss"
    skillsUpsertConfirmationResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/skillsUpsertConfirmation"
    skillsBulkResponse:
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: string
              docs:
                type: array
                items:
                  $ref: "#/components/schemas/skills"
    frontpageResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/frontpage"
    frontpageUpsertConfirmationResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/frontpageUpsertConfirmation"
  requestBodies:
    loginRequest:
      content:
        application/json:
          schema:
            title: Login request
            type: object
            additionalProperties: false
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
    unlockRequest:
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              email:
                type: string
            required:
              - email
    postsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/posts"
    usersRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users"
    mediaRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/media"
    profilesRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/profiles"
    skillsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/skills"
    frontpageRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/frontpage"
externalDocs:
  description: Payload REST API documentation
  url: https://payloadcms.com/docs/rest-api/overview
servers:
  - url: /api
